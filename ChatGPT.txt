          You said:

Project 0.pdf
PDF
Can you complete the attached course project using the Python programming language?


            ChatGPT said:

ChatGPT

To complete the course project using Python, we need to:

 1. *Visualize the Big-O behavior* of various functions by plotting them
    over different ranges of nnn.
 2. *Perform empirical limit tests* to observe the behavior of the ratio
    f(n)g(n)\frac{f(n)}{g(n)}g(n)f(n)​as nnn increases.

Here's a step-by-step outline to implement the project:


      Step 1: Plotting Functions

For each pair of functions, we will:

  * Create two plots with nnn ranging from 1 to 10 and from 1 to
    10610^6106 (or higher if needed).


        Example for Deliverable 1

  * *Functions*: f(n)=12n(n−1)+10f(n) = \frac{1}{2}n(n-1) + 10f(n)=21​
    n(n−1)+10 and g(n)=n2g(n) = n^2g(n)=n2
  * *Plots*:
     1. Plot f(n)f(n)f(n) and g(n)g(n)g(n) for nnn from 1 to 10.
     2. Plot f(n)f(n)f(n) and g(n)g(n)g(n) for nnn from 1 to 10610^6106.


      Step 2: Empirical Limit Tests

For each pair of functions, we will:

  * Plot the ratio f(n)g(n)\frac{f(n)}{g(n)}g(n)f(n)​over the same
    ranges of nnn.


        Example for Deliverable 2

  * *Plot*:
     1. Plot f(n)g(n)\frac{f(n)}{g(n)}g(n)f(n)​for nnn from 1 to 10.
     2. Plot f(n)g(n)\frac{f(n)}{g(n)}g(n)f(n)​for nnn from 1 to 10610^6106.


      Step 3: Repeat Steps for Other Function Pairs

Repeat the steps for the other function pairs specified in Deliverables
3 to 5:

  * *Deliverable 3*: f(n)=n5+3n+1f(n) = \sqrt{n^5 + 3n + 1}f(n)=n5+3n+1

    ​, g(n)=5n2g(n) = 5n^2g(n)=5n2
  * *Deliverable 4*: f(n)=log⁡nf(n) = \log nf(n)=logn, g(n)=ng(n) =
    \sqrt{n}g(n)=n

    ​
  * *Deliverable 5*: f(n)=log⁡2nf(n) = \log_2 nf(n)=log2​n,
    g(n)=log⁡10ng(n) = \log_{10} ng(n)=log10​n


      Python Code Outline

Would you like me to provide the Python code for each of these steps?

4o


          You said:

Yes, please provide Python code for each step.


            ChatGPT said:

ChatGPT

Here's the Python code for each step of the project. We'll use libraries
such as |numpy| for numerical operations and |matplotlib| for plotting
the functions.


      Step-by-Step Python Code


        Step 1: Plotting Functions

python

Copy code

|import numpy as np
import matplotlib.pyplot as plt

# Step 1: Define the functions
def f1(n):
    return 0.5 * n * (n - 1) + 10

def g1(n):
    return n ** 2

# Step 1: Plot f(n) and g(n) for n from 1 to 10
n1 = np.arange(1, 11)
plt.figure(figsize=(10, 6))
plt.plot(n1, f1(n1), label='f(n) = 0.5 * n * (n - 1) + 10')
plt.plot(n1, g1(n1), label='g(n) = n^2')
plt.title('Functions f(n) and g(n) from n=1 to n=10')
plt.xlabel('n')
plt.ylabel('Function values')
plt.legend()
plt.grid(True)
plt.show()

# Step 1: Plot f(n) and g(n) for n from 1 to 10^6
n2 = np.arange(1, 10**6 + 1)
plt.figure(figsize=(10, 6))
plt.plot(n2, f1(n2), label='f(n) = 0.5 * n * (n - 1) + 10')
plt.plot(n2, g1(n2), label='g(n) = n^2')
plt.title('Functions f(n) and g(n) from n=1 to n=10^6')
plt.xlabel('n')
plt.ylabel('Function values')
plt.legend()
plt.grid(True)
plt.show()
|


        Step 2: Empirical Limit Test

python

Copy code

|# Step 2: Plot f(n)/g(n) for n from 1 to 10
plt.figure(figsize=(10, 6))
plt.plot(n1, f1(n1) / g1(n1), label='f(n) / g(n)')
plt.title('Ratio f(n) / g(n) from n=1 to n=10')
plt.xlabel('n')
plt.ylabel('Ratio')
plt.legend()
plt.grid(True)
plt.show()

# Step 2: Plot f(n)/g(n) for n from 1 to 10^6
plt.figure(figsize=(10, 6))
plt.plot(n2, f1(n2) / g1(n2), label='f(n) / g(n)')
plt.title('Ratio f(n) / g(n) from n=1 to n=10^6')
plt.xlabel('n')
plt.ylabel('Ratio')
plt.legend()
plt.grid(True)
plt.show()
|


        Repeat Steps for Other Function Pairs


          Deliverable 3: Functions with Different Growth Rates

python

Copy code

|# Define new functions
def f2(n):
    return np.sqrt(n**5 + 3*n + 1)

def g2(n):
    return 5 * n ** 2

# Plotting for Deliverable 3
# Functions plot from n=1 to 10
plt.figure(figsize=(10, 6))
plt.plot(n1, f2(n1), label='f(n) = sqrt(n^5 + 3n + 1)')
plt.plot(n1, g2(n1), label='g(n) = 5n^2')
plt.title('Functions f(n) and g(n) from n=1 to n=10')
plt.xlabel('n')
plt.ylabel('Function values')
plt.legend()
plt.grid(True)
plt.show()

# Functions plot from n=1 to 10^6
plt.figure(figsize=(10, 6))
plt.plot(n2, f2(n2), label='f(n) = sqrt(n^5 + 3n + 1)')
plt.plot(n2, g2(n2), label='g(n) = 5n^2')
plt.title('Functions f(n) and g(n) from n=1 to n=10^6')
plt.xlabel('n')
plt.ylabel('Function values')
plt.legend()
plt.grid(True)
plt.show()

# Ratio plot from n=1 to 10
plt.figure(figsize=(10, 6))
plt.plot(n1, f2(n1) / g2(n1), label='f(n) / g(n)')
plt.title('Ratio f(n) / g(n) from n=1 to n=10')
plt.xlabel('n')
plt.ylabel('Ratio')
plt.legend()
plt.grid(True)
plt.show()

# Ratio plot from n=1 to 10^6
plt.figure(figsize=(10, 6))
plt.plot(n2, f2(n2) / g2(n2), label='f(n) / g(n)')
plt.title('Ratio f(n) / g(n) from n=1 to n=10^6')
plt.xlabel('n')
plt.ylabel('Ratio')
plt.legend()
plt.grid(True)
plt.show()
|


          Deliverable 4: Functions with Slower Growth Rates

python

Copy code

|# Define new functions
def f3(n):
    return np.log(n)

def g3(n):
    return np.sqrt(n)

# Handle the case for n starting from 2
n3 = np.arange(2, 11)
n4 = np.arange(2, 10**6 + 1)

# Plotting for Deliverable 4
# Functions plot from n=2 to 10
plt.figure(figsize=(10, 6))
plt.plot(n3, f3(n3), label='f(n) = log(n)')
plt.plot(n3, g3(n3), label='g(n) = sqrt(n)')
plt.title('Functions f(n) and g(n) from n=2 to n=10')
plt.xlabel('n')
plt.ylabel('Function values')
plt.legend()
plt.grid(True)
plt.show()

# Functions plot from n=2 to 10^6
plt.figure(figsize=(10, 6))
plt.plot(n4, f3(n4), label='f(n) = log(n)')
plt.plot(n4, g3(n4), label='g(n) = sqrt(n)')
plt.title('Functions f(n) and g(n) from n=2 to n=10^6')
plt.xlabel('n')
plt.ylabel('Function values')
plt.legend()
plt.grid(True)
plt.show()

# Ratio plot from n=2 to 10
plt.figure(figsize=(10, 6))
plt.plot(n3, f3(n3) / g3(n3), label='f(n) / g(n)')
plt.title('Ratio f(n) / g(n) from n=2 to n=10')
plt.xlabel('n')
plt.ylabel('Ratio')
plt.legend()
plt.grid(True)
plt.show()

# Ratio plot from n=2 to 10^6
plt.figure(figsize=(10, 6))
plt.plot(n4, f3(n4) / g3(n4), label='f(n) / g(n)')
plt.title('Ratio f(n) / g(n) from n=2 to n=10^6')
plt.xlabel('n')
plt.ylabel('Ratio')
plt.legend()
plt.grid(True)
plt.show()
|


          Deliverable 5: Logarithmic Functions

python

Copy code

|# Define new functions
def f4(n):
    return np.log2(n)

def g4(n):
    return np.log10(n)

# Plotting for Deliverable 5
# Functions plot from n=2 to 10
plt.figure(figsize=(10, 6))
plt.plot(n3, f4(n3), label='f(n) = log2(n)')
plt.plot(n3, g4(n3), label='g(n) = log10(n)')
plt.title('Functions f(n) and g(n) from n=2 to n=10')
plt.xlabel('n')
plt.ylabel('Function values')
plt.legend()
plt.grid(True)
plt.show()

# Functions plot from n=2 to 10^6
plt.figure(figsize=(10, 6))
plt.plot(n4, f4(n4), label='f(n) = log2(n)')
plt.plot(n4, g4(n4), label='g(n) = log10(n)')
plt.title('Functions f(n) and g(n) from n=2 to n=10^6')
plt.xlabel('n')
plt.ylabel('Function values')
plt.legend()
plt.grid(True)
plt.show()

# Ratio plot from n=2 to 10
plt.figure(figsize=(10, 6))
plt.plot(n3, f4(n3) / g4(n3), label='f(n) / g(n)')
plt.title('Ratio f(n) / g(n) from n=2 to n=10')
plt.xlabel('n')
plt.ylabel('Ratio')
plt.legend()
plt.grid(True)
plt.show()

# Ratio plot from n=2 to 10^6
plt.figure(figsize=(10, 6))
plt.plot(n4, f4(n4) / g4(n4), label='f(n) / g(n)')
plt.title('Ratio f(n) / g(n) from n=2 to n=10^6')
plt.xlabel('n')
plt.ylabel('Ratio')
plt.legend()
plt.grid(True)
plt.show()
|


      Instructions to Run the Code

 1.

    *Install required libraries*: If you haven't installed |numpy| and |
    matplotlib|, run the following command:

    bash

    Copy code

    |pip install numpy matplotlib
    |

 2.

    *Run the Python script*: Copy and paste the code into a Python
    script (e.g., |project0.py|) and run it using:

    bash

    Copy code

    |python project0.py
    |

This code will generate all the required plots and allow you to analyze
the orders of growth of different functions. You can then include these
plots in your PDF report and provide explanations for each deliverable.

4o


          You said:

Now, create LaTeX code to write a nice project report which displays all these results and briefly interprets them. Make sure that all the questions from the original assignment are answered satisfactorily.


            ChatGPT said:

ChatGPT

Here's the LaTeX code for a comprehensive project report that includes
all the plots and provides interpretations for each deliverable. The
report is structured according to the assignment's requirements.


      LaTeX Code for Project Report

latex

Copy code

|\documentclass{article}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{float}
\usepackage{hyperref}
\usepackage{caption}

\title{CS 5720: Design and Analysis of Algorithms \\ Project 0 Report}
\author{Your Name}
\date{\today}

\begin{document}

\maketitle

\section{Introduction}

The goal of this project is to visualize and empirically test the order of growth of different functions using Python. We will plot several functions and their ratios to determine if they have the same or different orders of growth, based on Big-O notation. This report contains plots and interpretations for each deliverable specified in the project assignment.

\section{Deliverable 1: Visualizing Functions with the Same Order of Growth}

\subsection{Functions}
The functions under consideration are:
\[
f(n) = \frac{1}{2}n(n - 1) + 10, \quad g(n) = n^2
\]

\subsection{Plots and Interpretation}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{plot_fn_gn_1_to_10.png}
    \caption{Plot of $f(n)$ and $g(n)$ for $n$ ranging from 1 to 10.}
    \label{fig:fn_gn_1_10}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{plot_fn_gn_1_to_10e6.png}
    \caption{Plot of $f(n)$ and $g(n)$ for $n$ ranging from 1 to $10^6$.}
    \label{fig:fn_gn_1_10e6}
\end{figure}

\textbf{Interpretation:} In Figure \ref{fig:fn_gn_1_10}, the functions $f(n)$ and $g(n)$ appear to have different growth rates for small values of $n$. However, in Figure \ref{fig:fn_gn_1_10e6}, as $n$ becomes very large, $f(n)$ and $g(n)$ show similar growth rates, indicating that they are in the same order of growth, $\Theta(n^2)$.

\section{Deliverable 2: Empirical Limit Test}

\subsection{Empirical Limit Test}

We plot the ratio $\frac{f(n)}{g(n)}$ to empirically test the limit:

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{ratio_fn_gn_1_to_10.png}
    \caption{Plot of $\frac{f(n)}{g(n)}$ for $n$ ranging from 1 to 10.}
    \label{fig:ratio_fn_gn_1_10}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{ratio_fn_gn_1_to_10e6.png}
    \caption{Plot of $\frac{f(n)}{g(n)}$ for $n$ ranging from 1 to $10^6$.}
    \label{fig:ratio_fn_gn_1_10e6}
\end{figure}

\textbf{Interpretation:} In Figure \ref{fig:ratio_fn_gn_1_10}, the ratio $\frac{f(n)}{g(n)}$ varies significantly for small values of $n$. In Figure \ref{fig:ratio_fn_gn_1_10e6}, the ratio approaches a constant value as $n$ increases, confirming that $f(n)$ and $g(n)$ are indeed in the same order of growth.

\section{Deliverable 3: Functions with Different Orders of Growth}

\subsection{Functions}
\[
f(n) = \sqrt{n^5 + 3n + 1}, \quad g(n) = 5n^2
\]

\subsection{Plots and Interpretation}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{plot_fn2_gn2_1_to_10.png}
    \caption{Plot of $f(n)$ and $g(n)$ for $n$ ranging from 1 to 10.}
    \label{fig:fn2_gn2_1_10}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{plot_fn2_gn2_1_to_10e6.png}
    \caption{Plot of $f(n)$ and $g(n)$ for $n$ ranging from 1 to $10^6$.}
    \label{fig:fn2_gn2_1_10e6}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{ratio_fn2_gn2_1_to_10.png}
    \caption{Plot of $\frac{f(n)}{g(n)}$ for $n$ ranging from 1 to 10.}
    \label{fig:ratio_fn2_gn2_1_10}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{ratio_fn2_gn2_1_to_10e6.png}
    \caption{Plot of $\frac{f(n)}{g(n)}$ for $n$ ranging from 1 to $10^6$.}
    \label{fig:ratio_fn2_gn2_1_10e6}
\end{figure}

\textbf{Interpretation:} The plots clearly show that $f(n)$ grows faster than $g(n)$, confirming that $f(n) \in \Theta(n^{2.5})$ while $g(n) \in \Theta(n^2)$. Thus, $f(n)$ and $g(n)$ have different orders of growth.

\section{Deliverable 4: Functions with Slower Growth Rates}

\subsection{Functions}
\[
f(n) = \log n, \quad g(n) = \sqrt{n}
\]

\subsection{Plots and Interpretation}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{plot_fn3_gn3_2_to_10.png}
    \caption{Plot of $f(n)$ and $g(n)$ for $n$ ranging from 2 to 10.}
    \label{fig:fn3_gn3_2_10}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{plot_fn3_gn3_2_to_10e6.png}
    \caption{Plot of $f(n)$ and $g(n)$ for $n$ ranging from 2 to $10^6$.}
    \label{fig:fn3_gn3_2_10e6}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{ratio_fn3_gn3_2_to_10.png}
    \caption{Plot of $\frac{f(n)}{g(n)}$ for $n$ ranging from 2 to 10.}
    \label{fig:ratio_fn3_gn3_2_10}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{ratio_fn3_gn3_2_to_10e6.png}
    \caption{Plot of $\frac{f(n)}{g(n)}$ for $n$ ranging from 2 to $10^6$.}
    \label{fig:ratio_fn3_gn3_2_10e6}
\end{figure}

\textbf{Interpretation:} The plots indicate that $g(n) = \sqrt{n}$ grows faster than $f(n) = \log n$, confirming that $g(n) \in \Theta(\sqrt{n})$ and $f(n) \in \Theta(\log n)$. Thus, they have different orders of growth.

\section{Deliverable 5: Logarithmic Functions with the Same Order of Growth}

\subsection{Functions}
\[
f(n) = \log_2 n, \quad g(n) = \log_{10} n
\]

\subsection{Plots and Interpretation}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{plot_fn4_gn4_2_to_10.png}
    \caption{Plot of $f(n)$ and $g(n)$ for $n$ ranging from 2 to 10.}
    \label{fig:fn4_gn4_2_10}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{plot_fn4_gn4_2_to_10e6.png}
    \caption{Plot of $f(n)$ and $g(n)$ for $n$ ranging from 2 to $10^6$.}
    \label{fig:fn4_gn4_2_10e6}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{ratio_fn4_gn4_2_to_10.png}
    \caption{Plot of $\frac{f(n)}{g(n)}$ for $n$ ranging from 2 to 10.}
    \label{fig:ratio_fn4_gn4_2_10}
\end{figure}

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{ratio_fn4_gn4_2_to_10e6.png}
    \caption{Plot of $\frac{f(n)}{g(n)}$ for $n$ ranging from 2 to $10^6$.}
    \label{fig:ratio_fn4_gn4_2_10e6}
\end{figure}

\textbf{Interpretation:} As expected, both $f(n) = \log_2 n$ and $g(n) = \log_{10} n$ grow at the same rate. The ratio plot confirms that the ratio is a constant for large $n$, indicating that both functions are in the same order of growth, $\Theta(\log n)$.

\section{Conclusion}

This project successfully demonstrates how different functions can be analyzed and compared in terms of their asymptotic growth rates. By plotting the functions and their ratios over various ranges, we can visually confirm their order of growth in Big-O notation.

\end{document}
|


      Instructions for Using the LaTeX Code

 1.

    *Save the Code*: Save the LaTeX code into a |.tex| file, for
    example, |project_report.tex|.

 2.

    *Include Plots*: Ensure all plot images (e.g., |
    plot_fn_gn_1_to_10.png|, |ratio_fn_gn_1_10e6.png|, etc.) are in the
    same directory as the |.tex| file or update the paths in the |
    \includegraphics| commands accordingly.

 3.

    *Compile the Document*: Use a LaTeX editor like Overleaf or a local
    LaTeX installation (e.g., TeXShop for macOS, TeXworks for Windows)
    to compile the |.tex| file into a PDF.

This LaTeX document will produce a well-formatted project report with
all the required plots and interpretations as requested in the assignment.

4o


          You said:

Finally, can you write Python code which exports all the generated figures and names them consistent with the filenames expected by the LaTeX code?


            ChatGPT said:

ChatGPT

Certainly! Below is the Python code that generates all the required
figures and saves them with filenames that match the expected filenames
in the LaTeX code. This code ensures that each plot is saved in the
correct format and with the appropriate name.


      Python Code to Generate and Save Figures

python

Copy code

|import numpy as np
import matplotlib.pyplot as plt

# Step 1: Define the functions
def f1(n):
    return 0.5 * n * (n - 1) + 10

def g1(n):
    return n ** 2

def f2(n):
    return np.sqrt(n**5 + 3*n + 1)

def g2(n):
    return 5 * n ** 2

def f3(n):
    return np.log(n)

def g3(n):
    return np.sqrt(n)

def f4(n):
    return np.log2(n)

def g4(n):
    return np.log10(n)

# Generate n ranges
n1 = np.arange(1, 11)
n2 = np.arange(1, 10**6 + 1)
n3 = np.arange(2, 11)
n4 = np.arange(2, 10**6 + 1)

# Function to save plots
def save_plot(x, y1, y2, filename, xlabel='n', ylabel='Function values', title='', labels=('f(n)', 'g(n)')):
    plt.figure(figsize=(10, 6))
    plt.plot(x, y1, label=labels[0])
    plt.plot(x, y2, label=labels[1])
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.legend()
    plt.grid(True)
    plt.savefig(filename)
    plt.close()

def save_ratio_plot(x, y1, y2, filename, xlabel='n', ylabel='Ratio', title=''):
    plt.figure(figsize=(10, 6))
    plt.plot(x, y1 / y2, label='f(n) / g(n)')
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.legend()
    plt.grid(True)
    plt.savefig(filename)
    plt.close()

# Deliverable 1
save_plot(n1, f1(n1), g1(n1), 'plot_fn_gn_1_to_10.png', title='Plot of f(n) and g(n) from n=1 to n=10')
save_plot(n2, f1(n2), g1(n2), 'plot_fn_gn_1_to_10e6.png', title='Plot of f(n) and g(n) from n=1 to n=10^6')

# Deliverable 2
save_ratio_plot(n1, f1(n1), g1(n1), 'ratio_fn_gn_1_to_10.png', title='Ratio f(n) / g(n) from n=1 to n=10')
save_ratio_plot(n2, f1(n2), g1(n2), 'ratio_fn_gn_1_to_10e6.png', title='Ratio f(n) / g(n) from n=1 to n=10^6')

# Deliverable 3
save_plot(n1, f2(n1), g2(n1), 'plot_fn2_gn2_1_to_10.png', title='Plot of f(n) and g(n) from n=1 to n=10', labels=('f(n) = sqrt(n^5 + 3n + 1)', 'g(n) = 5n^2'))
save_plot(n2, f2(n2), g2(n2), 'plot_fn2_gn2_1_to_10e6.png', title='Plot of f(n) and g(n) from n=1 to n=10^6', labels=('f(n) = sqrt(n^5 + 3n + 1)', 'g(n) = 5n^2'))
save_ratio_plot(n1, f2(n1), g2(n1), 'ratio_fn2_gn2_1_to_10.png', title='Ratio f(n) / g(n) from n=1 to n=10')
save_ratio_plot(n2, f2(n2), g2(n2), 'ratio_fn2_gn2_1_to_10e6.png', title='Ratio f(n) / g(n) from n=1 to n=10^6')

# Deliverable 4
save_plot(n3, f3(n3), g3(n3), 'plot_fn3_gn3_2_to_10.png', title='Plot of f(n) and g(n) from n=2 to n=10', labels=('f(n) = log(n)', 'g(n) = sqrt(n)'))
save_plot(n4, f3(n4), g3(n4), 'plot_fn3_gn3_2_to_10e6.png', title='Plot of f(n) and g(n) from n=2 to n=10^6', labels=('f(n) = log(n)', 'g(n) = sqrt(n)'))
save_ratio_plot(n3, f3(n3), g3(n3), 'ratio_fn3_gn3_2_to_10.png', title='Ratio f(n) / g(n) from n=2 to n=10')
save_ratio_plot(n4, f3(n4), g3(n4), 'ratio_fn3_gn3_2_to_10e6.png', title='Ratio f(n) / g(n) from n=2 to n=10^6')

# Deliverable 5
save_plot(n3, f4(n3), g4(n3), 'plot_fn4_gn4_2_to_10.png', title='Plot of f(n) and g(n) from n=2 to n=10', labels=('f(n) = log2(n)', 'g(n) = log10(n)'))
save_plot(n4, f4(n4), g4(n4), 'plot_fn4_gn4_2_to_10e6.png', title='Plot of f(n) and g(n) from n=2 to n=10^6', labels=('f(n) = log2(n)', 'g(n) = log10(n)'))
save_ratio_plot(n3, f4(n3), g4(n3), 'ratio_fn4_gn4_2_to_10.png', title='Ratio f(n) / g(n) from n=2 to n=10')
save_ratio_plot(n4, f4(n4), g4(n4), 'ratio_fn4_gn4_2_to_10e6.png', title='Ratio f(n) / g(n) from n=2 to n=10^6')
|


      Instructions for Running the Code

 1.

    *Install required libraries*: Make sure |numpy| and |matplotlib| are
    installed. If not, install them using:

    bash

    Copy code

    |pip install numpy matplotlib
    |

 2.

    *Run the Python script*: Save the above code into a Python file
    (e.g., |generate_plots.py|) and run it using:

    bash

    Copy code

    |python generate_plots.py
    |

This script will generate and save all the required figures with
filenames that match those referenced in the LaTeX code. Make sure that
the script and the LaTeX file are in the same directory, or adjust the
paths as necessary.

